networks:
  connexion:
    driver: bridge

volumes:
  db:
    driver: local
  web3_vol:
    driver: local

services:
  postgres:
    container_name: postgres
    image: postgres:17-alpine 
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - db:/var/lib/postgresql/data
      - .env:/app/.env
    ports:
      - 5432:5432
    networks:
      - connexion
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 1s

  back:
    container_name: back
    image: back
    build: backend/docker-backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - .env:/app/.env
      - web3_vol:/volume
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - connexion
    healthcheck:
      test: python3 manage.py check
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 1s
    restart: on-failure

  front:
    container_name: front
    image: front
    build:
      context: ./front
    ports:
      - "5173:5173"
    volumes:
      - ./front:/app
      # - env:/app/.env
    # healthcheck:
    #   test: curl -f http://localhost:5173
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 5s
    environment:
      VITE_BACKEND_IP: ${VITE_BACKEND_IP}
      VITE_WSS_IP: ${VITE_WSS_IP}
    networks:
      - connexion
    depends_on:
      back :
        condition: service_healthy
    restart: on-failure


  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - connexion
    env_file:
      - .env
    environment:
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_URL: ${REDIS_URL}
    depends_on:
      back:
        condition: service_healthy
    restart: on-failure

  nginx:
    container_name: nginx
    build: ./nginx/
    image: nginx:ke3ikI3a
    ports:
      - "443:443"
    volumes:
      - .env:/.env
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - connexion
    depends_on:
      # front:
      #   condition: service_healthy
      back:
        condition: service_healthy
    restart: on-failure

  # web3_app:
  #   container_name: web3_app
  #   image: web3_app:69
  #   restart: always
  #   build: web3
  #   networks:
  #     - connexion
  #   environment:
  #     PRIVATE_KEY: ${PRIVATE_KEY}
  #   volumes:
  #     - web3_vol:/root/
  #   healthcheck:

  #     test: ["CMD", "nc", "-zv", "web3_app", "7545"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 1s