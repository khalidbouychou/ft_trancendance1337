networks:
  connexion:
    driver: bridge

volumes:
  db:
    driver: local
  web3_vol:
    driver: local



services:
  postgres:
    container_name: postgres
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - ./db:/var/lib/postgresql/data
      - .env:/app/.env
    ports:
      - 5432:5432
    networks:
      - connexion
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 1s

  back:
    container_name: back
    image: back
    build: backend/docker-backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - .env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      web3:
        condition: service_healthy
    networks:
      - connexion
    healthcheck:
      test: python3 manage.py check
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 1s
    restart: on-failure

  front:
    container_name: front
    image: front
    build:
      context: ./front/docker-front
    ports:
      - "5173:5173"
    volumes:
      - ./front:/app
      - .env:/app/.env
    networks:
      - connexion
    depends_on:
      back :
        condition: service_healthy
    restart: on-failure

  web3:
    container_name: web3
    image: web3:69
    restart: always
    build: web3
    networks:
      - connexion
    environment:
      PRIVATE_KEY: ${PRIVATE_KEY}
    volumes:
      - web3_vol:/root/
    healthcheck:
      test: ["CMD", "nc", "-zv", "web3", "7545"] # TODO : check the presence of contractaddress instead
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s

  # redis:
  #   container_name: redis
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - connexion
  #   depends_on:
  #     - back
  #     - front
  #   restart: on-failure

  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx
  #   ports:
  #     # - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl/:/etc/nginx/ssl/  # Your SSL certificates
  #     - ./front/dist:/usr/share/nginx/html  # Serve React's build files
  #   networks:
  #     - connexion
  #   depends_on:
  #     - back
  #     - front
  #   restart: on-failure
